name: Deploy to EC2

on:
  push:
    branches:
      - main  # Trigger when code is pushed to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      # - name: Create .env file
      #   run: |
      #     echo "${{ secrets.ENV_FILE }}" | tr -d '\r' > .env

      - name: Decode and create .env file
        run: |
          echo "${{ secrets.ENV_FILE_BASE64 }}" | base64 --decode > .env

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=${{ secrets.ECR_REPOSITORY }}:latest
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          ECR_REPO: ${{ secrets.ECR_REPOSITORY }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'EOF'
          
            echo "Starting Docker..."
            sudo systemctl start docker
            sudo systemctl enable docker
          
            echo "Logging into AWS ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPO
            
            echo "Stopping and removing existing container..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "Pulling the latest image..."
            docker pull $ECR_REPO:latest

            echo "Running the container..."
            docker run -d --name $CONTAINER_NAME --restart unless-stopped -p 80:3000 --env-file .env $ECR_REPO:latest
          EOF


          
